{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Фильм_часть1_генерация текста","provenance":[{"file_id":"1bnI2LtiQRfrvVe2801IJBWHLOGb1ACuI","timestamp":1630586137513},{"file_id":"1tnWMZ26NygRQS1XpHDDBPBiPJvoUFcRN","timestamp":1626245007385},{"file_id":"1f50SWXTnjfXnoF19IhpuSeh5D9E9nVxl","timestamp":1621952027471}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"CwdOqup7COQd"},"source":["#Генерация текста для мультфильма "]},{"cell_type":"code","metadata":{"id":"XQLwnXIIwAZC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634365583745,"user_tz":-180,"elapsed":6592,"user":{"displayName":"Дарья Курганская","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10001247416734268166"}},"outputId":"8d5075d1-ae06-4e50-dcda-4d9f0f3e12c1"},"source":["#@title Установка необходимых пакетов\n","\n","!pip install transformers\n","!pip install googletrans==3.1.0a0"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Successfully installed huggingface-hub-0.0.19 pyyaml-6.0 sacremoses-0.0.46 tokenizers-0.10.3 transformers-4.11.3\n","Collecting googletrans==3.1.0a0\n","  Downloading googletrans-3.1.0a0.tar.gz (19 kB)\n","Collecting httpx==0.13.3\n","  Downloading httpx-0.13.3-py3-none-any.whl (55 kB)\n","\u001b[K     |████████████████████████████████| 55 kB 2.1 MB/s \n","\u001b[?25hCollecting hstspreload\n","  Downloading hstspreload-2021.10.1-py3-none-any.whl (1.2 MB)\n","\u001b[K     |████████████████████████████████| 1.2 MB 10.9 MB/s \n","\u001b[?25hCollecting httpcore==0.9.*\n","  Downloading httpcore-0.9.1-py3-none-any.whl (42 kB)\n","\u001b[K     |████████████████████████████████| 42 kB 1.2 MB/s \n","\u001b[?25hRequirement already satisfied: chardet==3.* in /usr/local/lib/python3.7/dist-packages (from httpx==0.13.3->googletrans==3.1.0a0) (3.0.4)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from httpx==0.13.3->googletrans==3.1.0a0) (2021.5.30)\n","Collecting rfc3986<2,>=1.3\n","  Downloading rfc3986-1.5.0-py2.py3-none-any.whl (31 kB)\n","Collecting sniffio\n","  Downloading sniffio-1.2.0-py3-none-any.whl (10 kB)\n","Requirement already satisfied: idna==2.* in /usr/local/lib/python3.7/dist-packages (from httpx==0.13.3->googletrans==3.1.0a0) (2.10)\n","Collecting h2==3.*\n","  Downloading h2-3.2.0-py2.py3-none-any.whl (65 kB)\n","\u001b[K     |████████████████████████████████| 65 kB 3.6 MB/s \n","\u001b[?25hCollecting h11<0.10,>=0.8\n","  Downloading h11-0.9.0-py2.py3-none-any.whl (53 kB)\n","\u001b[K     |████████████████████████████████| 53 kB 1.9 MB/s \n","\u001b[?25hCollecting hyperframe<6,>=5.2.0\n","  Downloading hyperframe-5.2.0-py2.py3-none-any.whl (12 kB)\n","Collecting hpack<4,>=3.0\n","  Downloading hpack-3.0.0-py2.py3-none-any.whl (38 kB)\n","Building wheels for collected packages: googletrans\n","  Building wheel for googletrans (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for googletrans: filename=googletrans-3.1.0a0-py3-none-any.whl size=16367 sha256=c1cf98c0b487421c9b0e17635320822fde15210b14a9866c5e868b8fadf2dfbf\n","  Stored in directory: /root/.cache/pip/wheels/0c/be/fe/93a6a40ffe386e16089e44dad9018ebab9dc4cb9eb7eab65ae\n","Successfully built googletrans\n","Installing collected packages: hyperframe, hpack, sniffio, h2, h11, rfc3986, httpcore, hstspreload, httpx, googletrans\n","Successfully installed googletrans-3.1.0a0 h11-0.9.0 h2-3.2.0 hpack-3.0.0 hstspreload-2021.10.1 httpcore-0.9.1 httpx-0.13.3 hyperframe-5.2.0 rfc3986-1.5.0 sniffio-1.2.0\n"]}]},{"cell_type":"code","metadata":{"id":"thQWoy4hg9N0","executionInfo":{"status":"ok","timestamp":1634365612669,"user_tz":-180,"elapsed":28934,"user":{"displayName":"Дарья Курганская","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10001247416734268166"}}},"source":["import torch\n","from transformers import GPT2Tokenizer, GPT2LMHeadModel"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"qoEWzdDxPhJf"},"source":["#@title Импорт модели\n","\n","model = GPT2LMHeadModel.from_pretrained('pranavpsv/gpt2-genre-story-generator')\n","tokenizer = GPT2Tokenizer.from_pretrained('gpt2')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BJl42x1OAzXl","executionInfo":{"status":"ok","timestamp":1634365675965,"user_tz":-180,"elapsed":261,"user":{"displayName":"Дарья Курганская","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10001247416734268166"}}},"source":["#@markdown Вебирете название жанра\n","gen='sci_fi' #@param['superhero', 'sci_fi', 'horror', 'action', 'thriller', 'drama']\n"," \n","#@markdown Введите название текста\n","text=\"One sunny day\"#@param{type:\"string\"}\n","\n","n = 2 #количество вставок \"I\"\n","temperature = 2.1"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"HCAAfg903usm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634365766398,"user_tz":-180,"elapsed":85989,"user":{"displayName":"Дарья Курганская","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10001247416734268166"}},"outputId":"56bb41d5-4cc4-4e29-9770-dbcbd1f4e8cf"},"source":["#@title Генерация\n","i=0\n","sentence = f'<BOS><{gen}>{text}'\n","\n","while len(sentence.split(' '))<=450:\n","    i+=1\n","    try:\n","      if i <= n:\n","        \n","        lenght = 50 #длина предложений\n","        context_tokens = tokenizer.encode(sentence, add_special_tokens=False)\n","        context = torch.tensor(context_tokens, dtype=torch.long)\n","        num_samples = 1\n","        generated = context.unsqueeze(0).repeat(num_samples, 1)\n","\n","        out = model.generate(generated, min_length=lenght+lenght*i, max_length=lenght+lenght*i+100, do_sample=True, top_k=35, top_p=0.95) #генерация текста\n","        sentence = tokenizer.decode(out[0], skeap_special_tokens=True)[:tokenizer.decode(out[0], skeap_special_tokens=True).rfind('.')] + '\"I  '\n","        #print(sentence)\n","\n","      else:\n","        lenght = 60 #длина предложений\n","        context_tokens = tokenizer.encode(sentence, add_special_tokens=False)\n","        context = torch.tensor(context_tokens, dtype=torch.long)\n","        num_samples = 1\n","        generated = context.unsqueeze(0).repeat(num_samples, 1)\n","\n","        out = model.generate(generated, min_length=lenght+lenght*i, max_length=lenght+lenght*i+100, do_sample=True, top_k=35, top_p=0.95)\n","        sentence = tokenizer.decode(out[0], skeap_special_tokens=True)[:tokenizer.decode(out[0], skeap_special_tokens=True).rfind('.')]\n","\n","    except TypeError :\n","      i-=1\n","      print('error')\n","      continue\n","    except IndexError :\n","      i-=1\n","      print('error')\n","      continue\n","    sentence = sentence+\".\"\n","print(sentence)"],"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n","Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n","Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n"]},{"output_type":"stream","name":"stdout","text":["error\n"]},{"output_type":"stream","name":"stderr","text":["Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n","Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n","Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n","Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n","Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation.\n"]},{"output_type":"stream","name":"stdout","text":["<BOS><sci_fi>One sunny day a stranger (Peter Coy) arrives and introduces himself as Tom (John Carradine) who is looking for a girl. The stranger tells Tom that his wife had gone to a party. He says that she had left him a bracelet with the same number as the bracelet.  Tom meets a young man called Alex (Elisha Cook Jr.). When he asks her to a dance, Alex agrees to play with him. When she leaves, the man asks her to go home, and to sleep on his sofa. Tom then sees Alex's father (George Hamilton) and sees that the father is drunk. After hearing noises outside, Alex wakes up and discovers that her father has shot himself\"I...I think that he killed the father. He goes to Alex's room and finds the bracelet in a bundle on the floor and says he wants to leave. He then tells her that he was going to make his own life miserable, as there was something he loved more than anything else. He also says that he is going to give her a bracelet, and when he comes home he finds she is gone, his family gone\"I...she (apparently) shot herself.\"He also leaves the house, as the room was unlocked.  The next day, Tom hears a noise and sees his car parked outside the door, obviously disturbed. When he enters the house, he finds a woman who has a shotgun, who turns out to be Alex. He says that they both had gone to Alex's room with a shotgun, and both women found out where they were and ran off. He tells the couple to leave the house, and they do so.  Alex gets out a door. Tom and Alex are startled when she enters, saying she has a shotgun. Alex flees the house and hides in the basement. She goes to the basement and finds the car in the middle of nowhere. In the basement, Alex spots the keys to a television set and drives outside to get it. The car goes off the road, and the keys fall on Tom. The car is now stalled in the middle of nowhere. After he gets out and chases after it, Tom sees Alex's father and is angry with Alex for leaving Alex alone. The car finally reaches the top of the mountain and Tom goes outside to help. Tom goes in to fix a broken light switch, and when he tries to pull the trigger, it goes off. Tom then tells his dad that he didn't try to shoot Alex.  Tom goes back inside to get Alex's father's gun. The father appears and tells Tom that they will have to drive back to the mountain. Alex runs down the mountain to get his father.  The car finally leaves the mountain and looks for Tom at the road, and Tom returns to look at the road.\n"]}]},{"cell_type":"code","metadata":{"id":"1GD8LXT0PziG"},"source":["poubelle, corbeille, sentence = sentence.split('>') #убираем BOS и название жанра"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MDMhER8Bdc9c"},"source":["sentence = sentence.replace('\"', '. ^ ') #заменяем кавычки, символизирующие начало диалога, на ^ для более простой генерации мультиголоса"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fbg23OarUHlF"},"source":["sentence"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FoMJr0QZe8Rp"},"source":["## Перевод"]},{"cell_type":"code","metadata":{"id":"FpA3ObshfAyZ"},"source":["from googletrans import Translator"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"o_YYLvUVGkk1"},"source":["#@markdown Выбор языка\n","language='English' #@param['English', 'French', 'German']\n","\n","translator = Translator()\n","\n","if language=='French':\n","  res = translator.translate(sentence, dest='fr')\n","  sentence = res.text\n","elif language=='German': \n","  res = translator.translate(sentence, dest='de')\n","  sentence = res.text\n","\n","print(sentence)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2UztDB17h-rC"},"source":["##Пожалуйста, скопируйте переменную sentence, она нам понадобится в блоклоте \"Фильм_часть2-1\"."]}]}